export const compoundMulticallBytecode =
  '0x60808060405234610016576108e7908161001c8239f35b600080fdfe608060408181526004918236101561001657600080fd5b6000803560e01c631e1fd1c11461002d5750600080fd5b346104b957827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126104b957833590610067826104bc565b73ffffffffffffffffffffffffffffffffffffffff602435610088816104bc565b16937fc55dae6300000000000000000000000000000000000000000000000000000000845260209081858881895afa9485156104ac575b839561047d575b508051957f70a08231000000000000000000000000000000000000000000000000000000008752828780610119888c830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0381845afa968715610470575b8497610451575b508151947f374c49b4000000000000000000000000000000000000000000000000000000008652838680610180848d830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0381855afa958615610444575b8596610415575b508251977fa46fe83b00000000000000000000000000000000000000000000000000000000895284898b81865afa988915610408575b86996103d9575b5060ff809916976101e189610691565b97875b8b81168b8110156103c35790610342828f61033b610348958f8f8f908f918f8f846102e39284926102888f85908e6103369b51907fc8c7fe6b0000000000000000000000000000000000000000000000000000000082528180610257610100958694830191909160ff6020820193169052565b0381895afa9182156103b6575b8b92610389575b5050015173ffffffffffffffffffffffffffffffffffffffff1690565b92517f5c2549ee00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9182169c81019c8d5290831660208d0152919a919384928391829160400190565b03915afa92831561037c575b9261034d575b5061031d61030161064a565b73ffffffffffffffffffffffffffffffffffffffff9098168852565b8601906fffffffffffffffffffffffffffffffff169052565b61086e565b528c61086e565b5061072b565b6101e4565b8161036e9293503d8411610375575b6103668183610599565b81019061085a565b90386102f5565b503d61035c565b61038461060c565b6102ef565b6103a89250803d106103af575b6103a08183610599565b81019061079d565b388061026b565b503d610396565b6103be61060c565b610264565b5050886103d5918751948594856104df565b0390f35b6103fa919950853d8711610401575b6103f28183610599565b810190610636565b97386101d1565b503d6103e8565b61041061060c565b6101ca565b610436919650843d861161043d575b61042e8183610599565b810190610619565b9438610194565b503d610424565b61044c61060c565b61018d565b610469919750833d851161043d5761042e8183610599565b953861012d565b61047861060c565b610126565b61049e919550823d84116104a5575b6104968183610599565b8101906105f4565b93386100c6565b503d61048c565b6104b461060c565b6100bf565b80fd5b73ffffffffffffffffffffffffffffffffffffffff8116036104da57565b600080fd5b90608082019273ffffffffffffffffffffffffffffffffffffffff809216835260a060209384928382015260409687820152608060608201528751809652019501936000915b8483106105355750505050505090565b85518051821688528401516fffffffffffffffffffffffffffffffff16878501529581019594830194600190920191610525565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176105da57604052565b6105e2610569565b604052565b51906105f2826104bc565b565b908160209103126104da5751610609816104bc565b90565b506040513d6000823e3d90fd5b908160209103126104da575190565b519060ff821682036104da57565b908160209103126104da5761060990610628565b604051906040820182811067ffffffffffffffff8211176105da57604052565b60209067ffffffffffffffff8111610684575b60051b0190565b61068c610569565b61067d565b9061069b8261066a565b60406106a981519283610599565b8382527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06106d7839561066a565b0191600090815b8481106106ec575050505050565b602090845185810181811067ffffffffffffffff82111761071e575b86528481528285818301528285010152016106de565b610726610569565b610708565b60ff1660ff811461073c5760010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b519067ffffffffffffffff821682036104da57565b51906fffffffffffffffffffffffffffffffff821682036104da57565b809161010092839103126104da5760e06108459160405193840184811067ffffffffffffffff82111761084d575b6040526107d781610628565b84526107e5602082016105e7565b60208501526107f6604082016105e7565b60408501526108076060820161076b565b60608501526108186080820161076b565b608085015261082960a0820161076b565b60a085015261083a60c0820161076b565b60c085015201610780565b60e082015290565b610855610569565b6107cb565b908160209103126104da5761060990610780565b80518210156108825760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea2646970667358221220ca14d2eacbd79074b9c83df4d941cf022762f048e7e879e274ff77b2c6dba0b064736f6c634300080d0033'
export const compoundMulticallAbi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: 'owner',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'cometAddress',
        type: 'address',
      },
    ],
    name: 'getUserPositions',
    outputs: [
      {
        internalType: 'address',
        name: 'baseToken',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'baseTokenBalance',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'borrowBalance',
        type: 'uint256',
      },
      {
        components: [
          {
            internalType: 'address',
            name: 'asset',
            type: 'address',
          },
          {
            internalType: 'uint128',
            name: 'balance',
            type: 'uint128',
          },
        ],
        internalType: 'struct CompoundUserPositionMulticall.CollateralInfo[]',
        name: 'collaterals',
        type: 'tuple[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
] as const
